#!/usr/bin/perl -w
# 
# check_sas_raid
# Check hardware raid based on LSI Fusion-MPT SAS(-2)
#
# Nicolas Hennion (aka Nicolargo)
#
# Add the following line to the sudoers file (where 0 is the id card number):
# nagios ALL= NOPASSWD: /usr/sbin/sas2ircu 0 STATUS
#
#==================================================
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Library General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor Boston, MA 02110-1301,  USA
#
# http://www.gnu.org/licenses/gpl.txt
#
#==================================================
my $program_name = "check_sas_raid";
my $program_version = "0.2";
my $program_date = "09/2011";

# Libraries
#----------

use strict;
use lib "/usr/local/nagios/libexec";
use Getopt::Std;

# Globals variables
#------------------

my $cardid = "0";
my $output = "Raid status";
my $raidstatus = 'sudo /usr/sbin/sas2ircu';
my %ERRORS = ('UNKNOWN' , '3',
              'OK' , '0',
              'WARNING', '1',
              'CRITICAL', '2' );
my $state = "UNKNOWN";
my $answer = "";

# Programs argument management
#-----------------------------

my %opts = ();
getopts("hvi:", \%opts);
if ($opts{v}) {
    # Display the version
    print "$program_name $program_version ($program_date)\n";
    exit(-1);
}
if ($opts{h}) {
    # Help
    print "$program_name $program_version\n";
    print "usage: ", $program_name," [options]\n";
    print " -h: Print the command line help\n";
    print " -v: Print the program version\n";
    print " -i:Â Card id, default is 0\n";
    exit (-1);
}
if ($opts{i}) {
	$cardid = $opts{i};
}

# Main program
#-------------

system("$raidstatus $cardid STATUS | grep 'Volume state' > /tmp/$program_name.res") == 0
	or die "$state: $raidstatus failed ($?)";

open FILE, "</tmp/$program_name.res";
my @lines = <FILE>;

for (@lines) {
	if ($_ =~ /Optimal/) {
		$state = "OK";
	} elsif ($_ =~ /Degraded/) {
		$state = "WARNING";
	} elsif ($_ =~ /Failed/) {
		$state = "CRITICAL";
	} else {
		$state = "UNKNOWN";
	}
	$output = $_;
}

system("rm -f /tmp/$program_name.res") == 0
	or die "$state: Can not delete /tmp/$program_name.res ($?)";


print $output;

exit $ERRORS{$state};

# The end...

